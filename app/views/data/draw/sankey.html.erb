<style>

  .node rect {
    cursor: move;
    fill-opacity: .9;
    shape-rendering: crispEdges;
  }

  .node text {
    pointer-events: none;
    text-shadow: 0 1px 0 #fff;
  }

  .link {
    fill: none;
    stroke: #000;
    stroke-opacity: .2;
  }

  .link:hover {
    stroke-opacity: .5;
  }

  .list-group {
    min-height: 25px;
  }

  .panel-body > .checkbox {
    margin-bottom: 0;
    margin-top: 0;
  }

  .panel-body.selected {
    background: #efefef;
  }

  .panel-body.selected:hover {
    background: #fafafa;
  }

  .panel-body:hover {
    background: #eaeaea;
  }

</style>

<h1>Draw#sankey</h1>

<div class="form-group">
  <label for="select">Select</label>
  <select id="select" class="form-control">
    <option disabled selected> loading... </option>
  </select>
</div>

<div class="row" id="selectedItem">
</div>

<div class="form-group">
  <a class="btn btn-primary" onclick="buttonClick()">Draw</a>
  <a class="btn" onclick="reset()">Reset</a>
</div>

<button id="saveButton" onclick="save()" class="btn btn-primary" style="display: none">Save</button>

<div id="chart"></div>

<%= javascript_include_tag 'draw/'+action_name.dasherize %>
<script>
  var data,
    graph,
    graphCopy;
    nodes = {},
    panelsCount = 0,
    maxPanel = 4,
    $select = null
    selectize = null;
  graph = {"nodes":[], "links":[]};
  var req = $.get("<%= datum_path(@datum, format: :json) %>");

  $.when(req).done(function(res) {
    data = res;
    updateSelect(data.headers);
  });

  var updateSelect = function(options) {
    for (var i = options.length - 1; i >= 0; i--) {
      $("#select").append('<option value="'+options[i]+'"">'+options[i]+'</option>')
    }
    $select = $("#select").selectize({
      maxItems: 4,
      onItemAdd: function(value, $item) {addPanel(value)},
      onItemRemove: function(value) {removePanel(value)}
    });
    selectize = $select[0].selectize;
  }


  var addPanel = function(header) {
    if (panelsCount < maxPanel) {
      $('.panels').removeClass("col-md-"+(12/panelsCount++))
      $('.panels').addClass("col-md-"+(12/panelsCount))
      $("#selectedItem").append(createPanel(header));
      nodes[header] = [];
      nodes[header] = JSON.parse(JSON.stringify(data["values"][header]));
    }
  }

  var removePanel = function(header) {
    if (panelsCount > 0) {
      $('.panels').removeClass("col-md-"+(12/panelsCount--))
      $('.panels').addClass("col-md-"+(12/panelsCount))
      $("#panel-"+removePunct(header)).remove();
      $("#panel-body-"+removePunct(header)).show();
      nodes[header] = [];
    }
  }

  var removePunct = function(str) {
    return str.replace(/[.,\/?#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s+/g, '');
  }

  var createPanel = function(header) {
    return  '<div class="panels col-md-'+(12/panelsCount)+'" id="panel-'+removePunct(header)+'">' +
              '<div class="bs-component">' +
                '<div class="panel panel-primary">' +
                  '<div class="panel-heading">' +
                    '<h3 class="panel-title">'+header+'</h3>' +
                  '</div>' +
                  '<div class="list-group">' + fillPanel(header) +
                  '</div>' +
                '</div>' +
              '</div>' +
            '</div>'
  }

  var fillPanel = function(header) {
    var r = "";

    for (var i = 0; i < data["values"][header].length; i++) {
      r += '<div class="panel-body selected" onclick="valueSelected(\''+header+'\', \''+data["values"][header][i]+'\', this)">'+data["values"][header][i]+'</div>'
    }

    return r;
  }

  var valueSelected = function(header, item, el) {
    if ($(el).hasClass('selected')) {
      var index = nodes[header].indexOf(item);
      if (index > -1) {
        nodes[header].splice(index, 1);
      }
      $(el).removeClass('selected');
    }
    else {
      nodes[header].push(item);
      $(el).addClass('selected');
    }
  }

  var reset = function() {
    $("#saveButton").hide();
    graph = {"nodes":[], "links":[]};
    $("#chart").html("")
  }

  var buttonClick = function() {
    for (var i = 0; i < selectize.getValue().length; i++) {
      addNode(selectize.getValue()[i]);
    }
    linkNodes(graph, data);
    graphCopy = jQuery.extend(true, {}, graph)
    $("#saveButton").show();
    drawSankey(graph);
    return false;
  }

  var save = function() {
    console.log(graphCopy)
    var type = "sankey",
      selections = JSON.stringify(graphCopy),
      datum_id = <%= @datum.id %>;

    var jqxhr = $.post("<%= visualizations_path %>", { visualization: { type: type, selections: selections, datum_id: datum_id }})
      .done(function(data) {
        $.globalEval(data);
      })
      .fail(function() {
        alert( "Error! Please try again later." );
      });
  }

  var addNode = function(header) {
    var d = nodes[header];

    for (var i = d.length - 1; i >= 0; i--) {
      var node = {"node":graph.nodes.length,"name":d[i], "header": header};
      graph.nodes.push(node);
    }
  }

</script>