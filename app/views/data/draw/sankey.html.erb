<style>

  .node rect {
    cursor: move;
    fill-opacity: .9;
    shape-rendering: crispEdges;
  }

  .node text {
    pointer-events: none;
    text-shadow: 0 1px 0 #fff;
  }

  .link {
    fill: none;
    stroke: #000;
    stroke-opacity: .2;
  }

  .link:hover {
    stroke-opacity: .5;
  }

  .list-group {
    min-height: 25px;
  }

  .panel-body > .checkbox {
    margin-bottom: 0;
    margin-top: 0;
  }

  .panel-body.selected {
    background: #efefef;
  }

  .panel-body.selected:hover {
    background: #fafafa;
  }

  .panel-body:hover {
    background: #eaeaea;
  }

</style>

<h1>Draw#sankey</h1>

<div class="form-group">
  <label for="select">Select</label>
  <select id="select" class="form-control">
    <option disabled selected> -- select an option -- </option>
  </select>
</div>

<div class="row" id="selectedItem">
</div>

<div class="form-group">
  <a class="btn btn-primary" onclick="buttonClick()">Draw</a>
  <a class="btn" onclick="reset()">Reset</a>
</div>

  <p id="chart"></p>

<script>
  var data,
    graph,
    nodes = {},
    panelsCount = 0,
    maxPanel = 4,
    $select = null
    selectize = null;
  graph = {"nodes":[], "links":[]};
  var req = $.get("<%= datum_path(@datum, format: :json) %>");

  $.when(req).done(function(res) {
    data = res;
    updateSelect(data.headers);
  });

  var updateSelect = function(options) {
    for (var i = options.length - 1; i >= 0; i--) {
      $("#select").append('<option value="'+options[i]+'"">'+options[i]+'</option>')
    }
    $select = $("#select").selectize({
      maxItems: 4,
      onItemAdd: function(value, $item) {addPanel(value)},
      onItemRemove: function(value) {removePanel(value)}
    });
    selectize = $select[0].selectize;
  }


  var addPanel = function(header) {
    if (panelsCount < maxPanel) {
      $('.panels').removeClass("col-md-"+(12/panelsCount++))
      $('.panels').addClass("col-md-"+(12/panelsCount))
      $("#selectedItem").append(createPanel(header));
      nodes[header] = [];
      nodes[header] = JSON.parse(JSON.stringify(data["values"][header]));
    }
  }

  var removePanel = function(header) {
    if (panelsCount > 0) {
      $('.panels').removeClass("col-md-"+(12/panelsCount--))
      $('.panels').addClass("col-md-"+(12/panelsCount))
      $("#panel-"+removePunct(header)).remove();
      $("#panel-body-"+removePunct(header)).show();
      nodes[header] = [];
    }
  }

  var removePunct = function(str) {
    return str.replace(/[.,\/?#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s+/g, '');
  }

  var createPanel = function(header) {
    return  '<div class="panels col-md-'+(12/panelsCount)+'" id="panel-'+removePunct(header)+'">' +
              '<div class="bs-component">' +
                '<div class="panel panel-primary">' +
                  '<div class="panel-heading">' +
                    '<h3 class="panel-title">'+header+'</h3>' +
                  '</div>' +
                  '<div class="list-group">' + fillPanel(header) +
                  '</div>' +
                '</div>' +
              '</div>' +
            '</div>'
  }

  var fillPanel = function(header) {
    var r = "";

    for (var i = 0; i < data["values"][header].length; i++) {
      r += '<div class="panel-body selected" onclick="valueSelected(\''+header+'\', \''+data["values"][header][i]+'\', this)">'+data["values"][header][i]+'</div>'
    }

    return r;
  }

  var valueSelected = function(header, item, el) {
    if ($(el).hasClass('selected')) {
      var index = nodes[header].indexOf(item);
      if (index > -1) {
        nodes[header].splice(index, 1);
      }
      $(el).removeClass('selected');
    }
    else {
      nodes[header].push(item);
      $(el).addClass('selected');
    }
  }

  var reset = function() {
    graph = {"nodes":[], "links":[]};
    $("#chart").html("")
  }

  var buttonClick = function() {
    for (var i = 0; i < selectize.getValue().length; i++) {
      addNode(selectize.getValue()[i]);
    }
    linkNodes();
    drawSankey(graph);
    return false;
  }

  var addNode = function(header) {
    var d = nodes[header];

    for (var i = d.length - 1; i >= 0; i--) {
      var node = {"node":graph.nodes.length,"name":d[i], "header": header};
      graph.nodes.push(node);
    }
  }

  var linkNodes = function() {
    var items = JSON.parse(JSON.stringify(data["items"]))
    var loop = graph.nodes.length;

    for (var i = 0; i < loop; i++) {
      for (var j = 0; j < loop; j++) {
        var link = {"source":i,"target":j,"value":0};
        graph.links.push(link);
      }
    }
    
    for (var i = items.length - 1; i >= 0; i--) {
      var item = items[i];

      for (var j = 0; j < loop; j++) {
        var ff = graph.nodes[j];

        for (var k = j; k < loop; k++) {
          var tt = graph.nodes[k];
          if(ff.header == tt.header) continue;
          if(item[ff.header] == ff.name && item[tt.header] == tt.name){
            if (item["Freq"] != undefined)
              graph.links[j*loop+k].value += parseInt(item["Freq"]);
            else graph.links[j*loop+k].value++;
            delete item[ff.header]
          }
        }
      }
    }

    for (var i = graph.links.length - 1; i >= 0; i--) {
      if (graph.links[i].value == 0) {
        graph.links.splice(i, 1);
      }
    }
  }

  var drawSankey = function(graph) {
    var units = "Records";

    var margin = {top: 10, right: 10, bottom: 10, left: 10},
        width = $("#chart").width() - margin.left - margin.right - 4,
        height = 600 - margin.top - margin.bottom;

    var formatNumber = d3.format(",.0f"),    // zero decimal places
        format = function(d) { return formatNumber(d) + " " + units; },
        color = d3.scale.category20();

    // append the svg canvas to the page
    var svg = d3.select("#chart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
      .append("g")
        .attr("transform", 
              "translate(" + margin.left + "," + margin.top + ")");

    // Set the sankey diagram properties
    var sankey = d3.sankey()
        .nodeWidth(36)
        .nodePadding(40)
        .size([width, height]);

    var path = sankey.link();

    // load the data
    // d3.json(data, function(error, graph) {

      sankey
          .nodes(graph.nodes)
          .links(graph.links)
          .layout(32);

    // add in the links
      var link = svg.append("g").selectAll(".link")
          .data(graph.links)
        .enter().append("path")
          .attr("class", "link")
          .attr("d", path)
          .style("stroke-width", function(d) { return Math.max(1, d.dy); })
          .sort(function(a, b) { return b.dy - a.dy; });

    // add the link titles
      link.append("title")
            .text(function(d) {
            return d.source.name + " â†’ " + 
                    d.target.name + "\n" + format(d.value); });

    // add in the nodes
      var node = svg.append("g").selectAll(".node")
          .data(graph.nodes)
        .enter().append("g")
          .attr("class", "node")
          .attr("transform", function(d) { 
          return "translate(" + d.x + "," + d.y + ")"; })
        .call(d3.behavior.drag()
          .origin(function(d) { return d; })
          .on("dragstart", function() { 
          this.parentNode.appendChild(this); })
          .on("drag", dragmove));

    // add the rectangles for the nodes
      node.append("rect")
          .attr("height", function(d) { return d.dy; })
          .attr("width", sankey.nodeWidth())
          .style("fill", function(d) { 
          return d.color = color(d.name.replace(/ .*/, "")); })
          .style("stroke", function(d) { 
          return d3.rgb(d.color).darker(2); })
        .append("title")
          .text(function(d) { 
          return d.name + "\n" + format(d.value); });

    // add in the title for the nodes
      node.append("text")
          .attr("x", -6)
          .attr("y", function(d) { return d.dy / 2; })
          .attr("dy", ".35em")
          .attr("text-anchor", "end")
          .attr("transform", null)
          .text(function(d) { return d.name; })
        .filter(function(d) { return d.x < width / 2; })
          .attr("x", 6 + sankey.nodeWidth())
          .attr("text-anchor", "start");

    // the function for moving the nodes
      function dragmove(d) {
        d3.select(this).attr("transform", 
            "translate(" + d.x + "," + (
                    d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))
                ) + ")");
        sankey.relayout();
        link.attr("d", path);
      }
    // });
  }
</script>