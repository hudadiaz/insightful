<style>

  .node rect {
    cursor: move;
    fill-opacity: .9;
    shape-rendering: crispEdges;
  }

  .node text {
    pointer-events: none;
    text-shadow: 0 1px 0 #fff;
  }

  .link {
    fill: none;
    stroke: #000;
    stroke-opacity: .2;
  }

  .link:hover {
    stroke-opacity: .5;
  }

  .list-group {
    min-height: 25px;
  }

  .panel-body > .checkbox {
    margin-bottom: 0;
    margin-top: 0;
  }

  .panel-body.selected {
    background: #efefef;
  }

  .panel-body.selected:hover {
    background: #fafafa;
  }

  .panel-body:hover {
    background: #eaeaea;
  }

</style>

<h1>Draw#sankey</h1>

<div class="row">
  <div class="col-sm-9">
    <div class="form-group">
      <label for="select-main">Select variables you want to see the relationships between them</label>
      <select id="select-main" class="form-control">
        <option disabled selected> loading... </option>
      </select>
    </div>
  </div>
  <div class="col-sm-3">
    <div class="form-group">
      <label for="select-measure">Relate based on</label>
      <select id="select-measure" class="form-control">
        <option disabled selected> loading... </option>
      </select>
    </div>
  </div>
</div>

<div class="form-group">
  <a class="btn btn-primary" onclick="draw()">Draw</a>
  <a id="saveButton" onclick="save()" class="btn btn-primary" style="display: none">Save</a>
</div>

<div class="draw-container">
  <div class="visualization-container">
    <div id="chart"></div>
  </div>
</div>

<div class="row">
  <div class="col-md-12">
    <p>You can select which element of a variable to be shown in the sankey. To hide, click the element.</p>
  </div>
  <div id="selectedItems"></div>
</div>

<%= javascript_include_tag 'draw/'+action_name.dasherize %>
<script>
  var data,
    graph,
    graphCopy;
    nodes = {},
    panelsCount = 0,
    maxPanel = 4,
    selectize = null,
    measure = 'count';
  graph = {"nodes":[], "links":[]};
  var req = $.get("<%= datum_path(@datum, format: :json) %>");

  $.when(req).done(function(res) {
    data = res;
    console.log(res)
    updateMainSelect(Object.keys(data.header_keys));
    updateMeasureSelect(Object.keys(data.header_keys));
  });

  var updateMainSelect = function(options) {
    $.each(options, function(i, key) {
      if (data["numbers"].indexOf(key) != -1) return true;
      $("#select-main")
        .append($("<option></option>")
        .attr("value",key)
        .text(key)); 
    })
    selectize = $("#select-main").selectize({
        maxItems: 4,
        onItemAdd: function(value, $item) {addPanel(value)},
        onItemRemove: function(value) {removePanel(value)}
      })[0].selectize;
  }

  var updateMeasureSelect = function(options) {
    $.each(options, function(i, key) {
      if (data["numbers"].indexOf(key) == -1) return true;
      $("#select-measure")
        .append($("<option></option>")
        .attr("value",key)
        .text(key)); 
    })
    $("#select-measure")
      .append($("<option selected></option>")
      .attr("value", 'count')
      .text("Count records"));
    $("#select-measure").selectize()[0]
      .selectize.on('change', function() {
        measure = this.getValue();
      });
  }


  var addPanel = function(header) {
    if (panelsCount < maxPanel) {
      $('.panels').removeClass("col-sm-"+(12/panelsCount++))
      $('.panels').addClass("col-sm-"+(12/panelsCount))
      $("#selectedItems").append(createPanel(header));
      nodes[header] = [];
      nodes[header] = JSON.parse(JSON.stringify(data["values"][getDataHeaderKey(data, header)]));
    }
  }

  var removePanel = function(header) {
    if (panelsCount > 0) {
      $('.panels').removeClass("col-sm-"+(12/panelsCount--))
      $('.panels').addClass("col-sm-"+(12/panelsCount))
      $("#panel-"+removePunct(header)).remove();
      $("#panel-body-"+removePunct(header)).show();
      nodes[header] = [];
    }
  }

  var removePunct = function(str) {
    return str.replace(/[.,\/?#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s+/g, '');
  }

  var createPanel = function(header) {
    return  '<div class="panels col-sm-'+(12/panelsCount)+'" id="panel-'+removePunct(header)+'">' +
              '<div class="bs-component">' +
                '<div class="panel panel-primary">' +
                  '<div class="panel-heading">' +
                    '<h3 class="panel-title">'+header+'</h3>' +
                  '</div>' +
                  '<div class="list-group">' + fillPanel(header) +
                  '</div>' +
                '</div>' +
              '</div>' +
            '</div>'
  }

  var fillPanel = function(header) {
    var r = "";

    for (var i = 0; i < data["values"][getDataHeaderKey(data, header)].length; i++) {
      r += '<div class="panel-body selected" onclick="valueSelected(\''+header+'\', \''+data["values"][getDataHeaderKey(data, header)][i]+'\', this)">'+data["values"][getDataHeaderKey(data, header)][i]+'</div>'
    }

    return r;
  }

  var valueSelected = function(header, item, el) {
    if ($(el).hasClass('selected')) {
      var index = nodes[header].indexOf(item);
      if (index > -1) {
        nodes[header].splice(index, 1);
      }
      $(el).removeClass('selected');
    }
    else {
      nodes[header].push(item);
      $(el).addClass('selected');
    }
  }

  var reset = function() {
    $(".draw-container").height("700px");
    $("#saveButton").hide();
    graph = {"nodes":[], "links":[]};
    $("#chart").html("")
  }

  var draw = function() {
    reset();

    $.each($(".panels"), function(i, panel) {
      if ($(panel).height() > $('.draw-container').height())
        $('.draw-container').height($(panel).height());
      console.log($(panel).height())
      console.log($('.draw-container').height())
    })

    for (var i = 0; i < selectize.getValue().length; i++) {
      addNode(selectize.getValue()[i]);
    }
    linkNodes(graph, data, measure);
    graphCopy = jQuery.extend(true, {}, graph)
    $("#saveButton").show();
    drawSankey(graph);
    return false;
  }

  var save = function() {
    console.log(graphCopy)
    var type = "sankey",
      selections = JSON.stringify(graphCopy),
      datum_id = <%= @datum.id %>;

    var jqxhr = $.post("<%= visualizations_path %>", { visualization: { type: type, selections: selections, datum_id: datum_id }})
      .done(function(data) {
        $.globalEval(data);
      })
      .fail(function() {
        alert( "Error! Please try again later." );
      });
  }

  var addNode = function(header) {
    var d = nodes[header];

    for (var i = d.length - 1; i >= 0; i--) {
      var node = {"node":graph.nodes.length,"name":d[i], "header": header};
      graph.nodes.push(node);
    }
  }

</script>