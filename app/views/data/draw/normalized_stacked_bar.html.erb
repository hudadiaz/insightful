<style>

  .axis path,
  .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
  }

  .bar {
    fill: steelblue;
  }

  .x.axis path {
    display: none;
  }

  .tooltip{
    text-anchor: middle;
    font-family: sans-serif;
    /*font-size: 10px;*/
    font-weight: bold;
    fill:black; 
  }

</style>

<h1>Draw#normalized_stacked_bar</h1>

<div class="row">
  <div class="col-sm-4">
    <div class="form-group">
      <label for="select-cat">Compare</label>
      <select id="select-cat" class="form-control">
        <option disabled selected> loading... </option>
      </select>
    </div>
  </div>
  <div class="col-sm-4">
    <div class="form-group">
      <label for="select-stack">On</label>
      <select id="select-stack" class="form-control">
        <option disabled selected> loading... </option>
      </select>
    </div>
  </div>
  <div class="col-sm-4">
    <div class="form-group">
      <label for="select-measure">According to</label>
      <select id="select-measure" class="form-control">
        <option disabled selected> loading... </option>
      </select>
    </div>
  </div>
</div>

<button id="saveButton" onclick="save()" class="btn btn-primary" style="display: none">Save</button>

<div id="chart"></div>

<%= javascript_include_tag 'draw/'+action_name.dasherize %>
<script>
  var data, selects = ["cat", "stack", "measure"], measure = 'false';

  // drawStackedBars(data);
  var req = $.get("<%= datum_path(@datum, format: :json) %>");

  $.when(req).done(function(res) {
    data = res;
    $.each(selects, function(i, val) {
      updateSelect(i, val, data["headers"]);
    });
    $("#select-measure")
      .append($("<option></option>")
      .attr("value", false)
      .text("Count records"));
    $.each(selects, function(i, val) {
      $("#select-"+val).selectize();
        $("#select-"+val).change(function() {
          draw();
        })
      });
  });

  var updateSelect = function(index, id, keys) {
    $.each(keys, function(i, key) {
      if (index != 2 && data["numbers"].indexOf(key) != -1) return true;
      if (index == 2 && data["numbers"].indexOf(key) == -1) return true;
      $("#select-"+id)
        .append($("<option></option>")
        .attr("value",key)
        .text(key)); 
    })
  }

  var draw = function() {
    reset()
    var obj = {}, valid = true;

    $.each(selects, function(i, id) {
      if ($("#select-"+id).val().length < 1) valid = false;
      obj[id] = $("#select-"+id).val();
    })

    measure = obj.measure;

    if (valid){
      $("#saveButton").show();
      processData(obj.cat, obj.stack, obj.measure, function(processedData){
        drawStackedBars(processedData, obj.cat, obj.measure)
      });
    }
  }

  var save = function() {
    var obj = {}, valid = true;

    $.each(selects, function(i, id) {
      if ($("#select-"+id).val().length < 1) valid = false;
      obj[id] = $("#select-"+id).val();
    })

    if (valid) {
      var type = "normalized_stacked_bar",
        selections = JSON.stringify(obj),
        datum_id = <%= @datum.id %>;

      var jqxhr = $.post("<%= visualizations_path %>", { visualization: { type: type, selections: selections, datum_id: datum_id }})
        .done(function(data) {
          $.globalEval(data);
        })
        .fail(function() {
          alert( "Error! Please try again later." );
        });
    }
  }

  var reset = function() {
    $("#saveButton").hide();
    $("#chart").html("")
  }

</script>